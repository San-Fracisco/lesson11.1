"""В данном случае, я выберу библиотеки requests, pandas и matplotlib.

1. requests:
- requests.get(url) - отправляет GET-запрос на указанный URL.
- requests.post(url, data) - отправляет POST-запрос на указанный URL с указанными данными.
- requests.put(url, data) - отправляет PUT-запрос на указанный URL с указанными данными.
- requests.delete(url) - отправляет DELETE-запрос на указанный URL.
- requests.head(url) - отправляет HEAD-запрос на указанный URL.
- requests.options(url) - отправляет OPTIONS-запрос на указанный URL.

2. pandas:
- pd.read_csv(file_path) - считывает данные из CSV-файла и возвращает DataFrame.
- df.head(n) - возвращает первые n строк DataFrame.
- df.describe() - возвращает статистические данные о DataFrame.
- df.groupby(column).mean() - группирует DataFrame по указанному столбцу и вычисляет среднее значение для каждой группы.

3. matplotlib:
- plt.plot(x, y) - строит график с указанными координатами x и y.
- plt.show() - отображает график.
- plt.bar(x, y) - строит столбчатую диаграмму с указанными координатами x и y.
- plt.xlabel(label) - устанавливает метку для оси x.
- plt.ylabel(label) - устанавливает метку для оси y.

4. BeautifulSoup:
- BeautifulSoup(html_string, 'html.parser') - создает объект BeautifulSoup, который позволяет парсить HTML-код.
- soup.find_all(tag) - находит все элементы с указанным тегом в HTML-коде.
- soup.find(tag, attrs) - находит первый элемент с указанным тегом и атрибутами в HTML-коде.
- soup.get_text() - возвращает текст из HTML-кода.

Все эти библиотеки значительно расширяют возможности Python для работы с данными и визуализации."""

'''
Matplotlib – это библиотека для создания графиков и визуализации данных. 
Она позволяет создавать как простые, так и сложные графики, включая линейные графики, 
гистограммы, диаграммы рассеяния и многое другое. Matplotlib является одной из самых популярных
библиотек для визуализации данных в Python и широко используется в научных исследованиях и аналитике данных.
'''

import matplotlib.pyplot as plt

# Данные для графика
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Создание графика
plt.plot(x, y)

# Добавление заголовка и подписей осей
plt.title('Пример линейного графика')
plt.xlabel('X ось')
plt.ylabel('Y ось')

# Показ графика
plt.show()

# В этом примере мы создаем линейный график, используя данные x и y. Мы добавляем заголовок и подписи осей
# с помощью функций title(), xlabel() и ylabel(). Наконец, мы отображаем график с помощью функции show().

'''
Pandas – это библиотека для работы с данными в Python. Она позволяет читать и обрабатывать данные из различных 
источников, включая CSV-файлы, Excel-файлы, базы данных и т.д. Pandas также предоставляет множество функций для 
обработки и анализа данных, включая группировку, сортировку, агрегацию и т.д. Pandas является одной из самых 
популярных библиотек для работы с данными в Python и широко используется в научных исследованиях и аналитике данных.
'''

import pandas as pd

# Чтение данных из CSV-файла
data = pd.read_csv('data.csv')

# Вывод первых пяти строк
print(data.head())

# Описание данных
print(data.describe())

# В этом примере мы загружаем данные из CSV-файла и выводим первые пять строк с помощью метода head().
# Также мы используем метод describe(), чтобы получить статистическое описание данных, включая среднее значение,
# стандартное отклонение и другие характеристики.

"""
Seaborn – это библиотека для визуализации данных, построенная на основе Matplotlib. 
Она предоставляет высокоуровневый интерфейс для создания красивых и информативных графиков. 
Seaborn упрощает создание сложных визуализаций и включает в себя множество встроенных стилей и цветовых палитр.
"""
import seaborn as sns
import matplotlib.pyplot as plt

# Данные для графика
data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]

# Создание графика распределения
sns.histplot(data, kde=True)

# Показ графика
plt.show()

# В этом примере мы создаем график распределения данных с помощью функции histplot() из библиотеки Seaborn.
# Мы также добавляем линию плотности распределения, установив параметр kde=True.
# Seaborn позволяет легко создавать информативные графики, которые помогают лучше понять данные.

"""
Requests - это библиотека для работы с HTTP-запросами, предоставляемая Python. Она позволяет отправлять HTTP-запросы и 
получать ответы от веб-серверов. Requests является одной из самых популярных библиотек для работы с HTTP-запросами в 
Python и широко используется в веб-разработке и аналитике данных.
"""
import requests
from bs4 import BeautifulSoup


def check_weather(city):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
    }
    # Отправляем GET-запрос на сайт с погодой
    responce = requests.get(f"https://www.google.com/search?q=погода+в+{city}", headers=headers)
    print(responce)
    # Создаем объект BeautifulSoup для парсинга HTML-кода
    soup = BeautifulSoup(responce.text, "html.parser")
    # Извлекаем данные о погоде
    temperature = soup.select("#wob_tm")[0].getText()
    title = soup.select("#wob_dc")[0].getText()
    humidity = soup.select("#wob_hm")[0].getText()
    time = soup.select("#wob_dts")[0].getText()
    wind = soup.select("#wob_ws")[0].getText()
    # Выводим данные о погоде
    print(time)
    print(title)
    print(f"Температура: {temperature}C")
    print(f"Влажность: {humidity}")
    print(f"Ветер: {wind}")


if __name__ == "__main__":
    city = str(input("Город: "))
    check_weather(city=city)

# В этом примере в начале кода мы импортируем необходимые библиотеки: requests для отправки HTTP-запросов и
# BeautifulSoup для парсинга HTML-кода.
# Затем мы определяем функцию check_weather, которая принимает на вход название города. Внутри этой функции мы создаем
# заголовки для запроса, чтобы Google не блокировал нашу программу.
# Далее мы отправляем GET-запрос на сайт Google с запросом "погода в {city}". Затем мы создаем объект BeautifulSoup
# для парсинга HTML-кода ответа.
# После этого мы извлекаем данные о погоде из HTML-кода с помощью метода select библиотеки BeautifulSoup.
# Мы ищем элементы с определенными CSS-селекторами и извлекаем текст из них.
# Наконец, мы выводим данные о погоде на консоль.
# В конце кода мы запрашиваем у пользователя название города и передаем его в функцию check_weather.
